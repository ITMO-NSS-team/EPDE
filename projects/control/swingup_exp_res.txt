 / 0.0 * d^2y/dx0^2{power: 1.0} + -7.727200753430651e-11 * d^2phi/dx0^2{power: 1.0} * cos(phi){power: 1.0, freq: 1.0000000031651224} + 1.0000000059511014 * dy/dx0{power: 1.0} * cos(phi){power: 2.0, freq: 0.9999999943859321} + 1.0000000448119988 * dy/dx0{power: 1.0} * sin(phi){power: 2.0, freq: 1.0000000019610675} + 0.0 * d^2phi/dx0^2{power: 1.0} + 0.0 * cos(phi){power: 1.0, freq: 1.0000000081224834} + 0.0 * dphi/dx0{power: 1.0} + 0.0 * d^2y/dx0^2{power: 1.0} * dphi/dx0{power: 1.0} + 0.0 * y{power: 2.0} * phi{power: 1.0} + -1.7853549749702324e-09 = dy/dx0{power: 1.0}
 \ 0.0 * sign(dy/dx1){power: 1.0} * ctrl{power: 1.0} + 0.0 * dy/dx0{power: 1.0} * cos(phi){power: 1.0, freq: 1.0000000089742989} * phi{power: 2.0} + 0.0030210750377751144 * dphi/dx0{power: 1.0} * d^2y/dx0^2{power: 1.0} + 0.0 * y{power: 1.0} * phi{power: 1.0} + 0.0 * sign(dy/dx1){power: 1.0} + -1.0329931025328838 * dphi/dx0{power: 1.0} * cos(phi){power: 1.0, freq: 1.0000000022384625} + 0.0 * sign(dy/dx1){power: 1.0} * phi{power: 2.0} + -0.040825137323030836 * dphi/dx0{power: 1.0} * sign(dy/dx1){power: 1.0} + 0.0 * phi{power: 1.0} * sign(dy/dx1){power: 1.0} + -0.001717601017286241 = dphi/dx0{power: 1.0}
{'terms_number': {'optimizable': False, 'value': 10}, 'max_factors_in_term': {'optimizable': False, 'value': {'factors_num': [1, 2, 3], 'probas': [0.2, 0.65, 0.15]}}, ('sparsity', 'phi'): {'optimizable': True, 'value': np.float64(0.0037731655745620366)}, ('sparsity', 'y'): {'optimizable': True, 'value': np.float64(0.0023363264230707947)}} , with objective function values of [1.31591275e-08 3.29576604e-01 9.50000000e+00 7.50000000e+00] 

 / 0.5424530613115187 * sin(phi){power: 2.0, freq: 1.0000000056521003} * d^2y/dx0^2{power: 1.0} + 0.0 * phi{power: 2.0} * d^2phi/dx0^2{power: 1.0} + 0.0 * ctrl{power: 1.0} * d^2phi/dx0^2{power: 1.0} + 0.0 * ctrl{power: 1.0} + -0.998350635021458 * d^2y/dx0^2{power: 1.0} * cos(phi){power: 1.0, freq: 0.9999999918165038} + 0.0 * phi{power: 2.0} * cos(phi){power: 1.0, freq: 1.0000000070052184} + 0.0 * cos(phi){power: 2.0, freq: 0.9999999910358738} * phi{power: 1.0} + 0.0 * phi{power: 1.0} * ctrl{power: 1.0} * dphi/dx0{power: 1.0} + 0.0 * d^2phi/dx0^2{power: 1.0} * y{power: 2.0} + 0.0005720178207212906 = d^2y/dx0^2{power: 1.0}
 \ -0.06116699405188222 * ctrl{power: 1.0} + -0.16838697157139643 * dphi/dx0{power: 1.0} + 0.0 * phi{power: 2.0} + 0.0 * d^2y/dx0^2{power: 1.0} + 0.0 * sign(dy/dx1){power: 1.0} * dy/dx0{power: 1.0} + -0.23432117871723038 * y{power: 2.0} * dphi/dx0{power: 1.0} + -0.2631069538872769 * phi{power: 1.0} * dphi/dx0{power: 1.0} + 0.08463124690050719 * cos(phi){power: 1.0, freq: 1.0000000063920724} * y{power: 1.0} + 0.0 * cos(phi){power: 1.0, freq: 0.9999999988353769} * d^2y/dx0^2{power: 1.0} + 0.011701042655416018 = dphi/dx0{power: 1.0} * cos(phi){power: 1.0, freq: 0.9999999958972616}
{'terms_number': {'optimizable': False, 'value': 10}, 'max_factors_in_term': {'optimizable': False, 'value': {'factors_num': [1, 2, 3], 'probas': [0.2, 0.65, 0.15]}}, ('sparsity', 'phi'): {'optimizable': True, 'value': np.float64(0.0034544906994279406)}, ('sparsity', 'y'): {'optimizable': True, 'value': np.float64(0.001358665116657151)}} , with objective function values of [ 0.04168263  0.11077704  7.         10.5       ] 

 / 0.0 * phi{power: 1.0} * y{power: 2.0} + 0.316203650969058 * dy/dx0{power: 1.0} * phi{power: 1.0} + 0.0 * cos(phi){power: 1.0, freq: 1.0000000081694838} * dphi/dx0{power: 1.0} + 0.0 * sin(phi){power: 1.0, freq: 0.9999999979327839} * d^2y/dx0^2{power: 1.0} + 0.0 * sign(dy/dx1){power: 1.0} * dphi/dx0{power: 1.0} + 0.34521274671203817 * sin(phi){power: 1.0, freq: 1.00000000903276} * dy/dx0{power: 1.0} + 0.0 * d^2phi/dx0^2{power: 1.0} * ctrl{power: 1.0} + 0.0 * ctrl{power: 1.0} + 0.0009556792946626702 * sign(dy/dx1){power: 1.0} + 0.0009350046009124757 = dy/dx0{power: 1.0}
 \ 0.20889318751087751 * dphi/dx0{power: 1.0} * phi{power: 1.0} + 0.0 * d^2y/dx0^2{power: 1.0} + 0.0 * phi{power: 1.0} + 0.014697069872215503 * phi{power: 2.0} * d^2y/dx0^2{power: 1.0} + -13.342203139324806 * cos(phi){power: 1.0, freq: 0.9999999924563278} + -1.3305249283656253 * dy/dx0{power: 1.0} + 0.0 * y{power: 1.0} * sign(dy/dx1){power: 1.0} + 1.0841979043167738 * y{power: 2.0} * phi{power: 1.0} + 0.7393890766697251 * y{power: 2.0} * dphi/dx0{power: 1.0} * sign(dy/dx1){power: 1.0} + -13.022570917699879 = dphi/dx0{power: 1.0} * phi{power: 2.0} * y{power: 2.0}
{'terms_number': {'optimizable': False, 'value': 10}, 'max_factors_in_term': {'optimizable': False, 'value': {'factors_num': [1, 2, 3], 'probas': [0.2, 0.65, 0.15]}}, ('sparsity', 'phi'): {'optimizable': True, 'value': np.float64(0.004449196720043388)}, ('sparsity', 'y'): {'optimizable': True, 'value': np.float64(0.004313275065053621)}} , with objective function values of [9.14401008e-03 1.76856545e+00 5.00000000e+00 1.30000000e+01] 

 / 0.0 * d^2y/dx0^2{power: 1.0} + 0.0 * dphi/dx0{power: 1.0} * sign(dy/dx1){power: 1.0} + -0.0010656966691508433 * phi{power: 1.0} * cos(phi){power: 1.0, freq: 1.000000005289826} + 0.0 * d^2y/dx0^2{power: 1.0} * sin(phi){power: 2.0, freq: 1.0000000083587328} + 14.2438226744499 * dy/dx0{power: 1.0} * sin(phi){power: 1.0, freq: 1.0000000031829697} + -1.452242809685833 * dy/dx0{power: 1.0} * d^2y/dx0^2{power: 1.0} * cos(phi){power: 1.0, freq: 0.9999999903647154} + 0.0 * sign(dy/dx1){power: 1.0} * sin(phi){power: 2.0, freq: 0.9999999909888249} + 0.0 * y{power: 1.0} * ctrl{power: 1.0} + 0.0 * dy/dx0{power: 1.0} + -0.0034165574403441923 = d^2phi/dx0^2{power: 1.0} * dy/dx0{power: 1.0}
 \ 0.0 * dy/dx0{power: 1.0} * phi{power: 2.0} + 0.0 * sign(dy/dx1){power: 1.0} * phi{power: 2.0} + 0.0 * sin(phi){power: 1.0, freq: 0.9999999914129002} * phi{power: 2.0} + 0.28635514174500865 * dy/dx0{power: 1.0} * sign(dy/dx1){power: 1.0} + 0.0 * dy/dx0{power: 1.0} * sin(phi){power: 2.0, freq: 1.0000000095405637} + 0.0 * d^2phi/dx0^2{power: 1.0} * dy/dx0{power: 1.0} + 0.0 * sin(phi){power: 2.0, freq: 1.0000000021034021} + -3.029893062844372 * d^2phi/dx0^2{power: 1.0} * cos(phi){power: 1.0, freq: 0.9999999928295236} + 0.0 * sin(phi){power: 1.0, freq: 1.0000000018148085} * dy/dx0{power: 1.0} * phi{power: 2.0} + -0.21769264461121307 = phi{power: 1.0} * d^2phi/dx0^2{power: 1.0}
{'terms_number': {'optimizable': False, 'value': 10}, 'max_factors_in_term': {'optimizable': False, 'value': {'factors_num': [1, 2, 3], 'probas': [0.2, 0.65, 0.15]}}, ('sparsity', 'phi'): {'optimizable': True, 'value': np.float64(0.0034899025738375986)}, ('sparsity', 'y'): {'optimizable': True, 'value': np.float64(0.0010177774594622437)}} , with objective function values of [3.65163394e-03 2.89970964e+00 9.00000000e+00 7.00000000e+00] 

 / 0.6085526061542992 * sin(phi){power: 2.0, freq: 1.0000000063257728} * d^2y/dx0^2{power: 1.0} + 0.10154586562086095 * sin(phi){power: 1.0, freq: 1.0000000077401434} * phi{power: 2.0} * d^2y/dx0^2{power: 1.0} + 0.0 * dy/dx0{power: 1.0} * cos(phi){power: 2.0, freq: 0.9999999943232079} + 0.0 * sin(phi){power: 2.0, freq: 0.9999999928360823} * phi{power: 1.0} + 0.0 * dphi/dx0{power: 1.0} * y{power: 2.0} + 0.0 * dphi/dx0{power: 1.0} * phi{power: 2.0} * ctrl{power: 1.0} + 0.0 * dy/dx0{power: 1.0} * sign(dy/dx1){power: 1.0} + 0.0 * ctrl{power: 1.0} * dphi/dx0{power: 1.0} + 0.0 * ctrl{power: 1.0} * phi{power: 1.0} + -3.3608658488735836e-05 = d^2y/dx0^2{power: 1.0} * sin(phi){power: 1.0, freq: 0.9999999956131386}
 \ 0.0 * d^2phi/dx0^2{power: 1.0} * sin(phi){power: 2.0, freq: 1.0000000062340706} + -1.452030260751567 * cos(phi){power: 1.0, freq: 1.000000009141247} * d^2y/dx0^2{power: 1.0} + 0.0 * y{power: 1.0} * sign(dy/dx1){power: 1.0} + 0.0 * dy/dx0{power: 1.0} * y{power: 2.0} + 0.0 * sign(dy/dx1){power: 1.0} * phi{power: 2.0} + 14.245710654823245 * sin(phi){power: 1.0, freq: 1.000000004984405} + 1.9841579167234613e-05 * d^2y/dx0^2{power: 1.0} * phi{power: 1.0} + 0.0 * cos(phi){power: 2.0, freq: 1.0000000012428276} + 0.0 * cos(phi){power: 1.0, freq: 1.0000000052350928} * y{power: 2.0} + -5.176304637211082e-05 = d^2phi/dx0^2{power: 1.0}
{'terms_number': {'optimizable': False, 'value': 10}, 'max_factors_in_term': {'optimizable': False, 'value': {'factors_num': [1, 2, 3], 'probas': [0.2, 0.65, 0.15]}}, ('sparsity', 'phi'): {'optimizable': True, 'value': np.float64(0.0006277230060188789)}, ('sparsity', 'y'): {'optimizable': True, 'value': np.float64(0.001080161762031664)}} , with objective function values of [3.55470705e-03 5.79810830e-03 8.00000000e+00 7.50000000e+00] 

 / 9.808750836561574 * dy/dx0{power: 1.0} * sin(phi){power: 1.0, freq: 0.9999999910310909} + -2.633892276737715e-05 * d^2y/dx0^2{power: 1.0} + 0.0 * d^2y/dx0^2{power: 1.0} * ctrl{power: 1.0} + 0.0 * y{power: 1.0} * phi{power: 1.0} + -0.6885894907905975 * dy/dx0{power: 1.0} * d^2phi/dx0^2{power: 1.0} + 0.0 * ctrl{power: 1.0} * y{power: 1.0} + 0.0 * d^2y/dx0^2{power: 1.0} * phi{power: 2.0} + 0.0 * ctrl{power: 1.0} * dy/dx0{power: 1.0} * dphi/dx0{power: 1.0} + 0.00014670506525428506 * sign(dy/dx1){power: 1.0} * cos(phi){power: 2.0, freq: 1.000000005790288} + -0.00016922903272027778 = dy/dx0{power: 1.0} * d^2y/dx0^2{power: 1.0} * cos(phi){power: 1.0, freq: 0.9999999903647154}
 \ 0.0 * cos(phi){power: 2.0, freq: 1.0000000057434761} + -0.3287418268354369 * d^2phi/dx0^2{power: 1.0} * phi{power: 1.0} + 0.0 * d^2phi/dx0^2{power: 1.0} * phi{power: 2.0} + 0.0 * sign(dy/dx1){power: 1.0} * phi{power: 2.0} + 0.0 * d^2y/dx0^2{power: 1.0} * cos(phi){power: 1.0, freq: 1.000000009529673} * ctrl{power: 1.0} + 0.0 * sign(dy/dx1){power: 1.0} * sin(phi){power: 1.0, freq: 0.9999999955101573} + 0.0 * ctrl{power: 1.0} * dy/dx0{power: 1.0} * d^2phi/dx0^2{power: 1.0} + 0.0 * dy/dx0{power: 1.0} + 0.0 * sin(phi){power: 1.0, freq: 1.0000000035400307} + -0.03003915933350737 = cos(phi){power: 1.0, freq: 1.0000000072084432} * d^2phi/dx0^2{power: 1.0}
{'terms_number': {'optimizable': False, 'value': 10}, 'max_factors_in_term': {'optimizable': False, 'value': {'factors_num': [1, 2, 3], 'probas': [0.2, 0.65, 0.15]}}, ('sparsity', 'phi'): {'optimizable': True, 'value': np.float64(0.004331513522491953)}, ('sparsity', 'y'): {'optimizable': True, 'value': np.float64(0.005146938329464164)}} , with objective function values of [2.49521559e-03 1.01279800e+00 1.30000000e+01 5.00000000e+00] 

 / 0.0 * d^2y/dx0^2{power: 1.0} + 0.0 * d^2phi/dx0^2{power: 1.0} * d^2y/dx0^2{power: 1.0} + 0.3170236635829715 * dy/dx0{power: 1.0} * phi{power: 1.0} + 0.0 * sign(dy/dx1){power: 1.0} * d^2phi/dx0^2{power: 1.0} + 0.0 * sign(dy/dx1){power: 1.0} * phi{power: 2.0} + 0.0 * sin(phi){power: 2.0, freq: 1.0000000045998894} * dphi/dx0{power: 1.0} + 0.3427319308174847 * sin(phi){power: 1.0, freq: 1.00000000903276} * dy/dx0{power: 1.0} + 0.0 * dphi/dx0{power: 1.0} * cos(phi){power: 1.0, freq: 0.999999999727322} + 0.0 * sin(phi){power: 1.0, freq: 1.0000000051089264} * d^2phi/dx0^2{power: 1.0} + 0.0011228582543287013 = dy/dx0{power: 1.0}
 \ 0.0 * dphi/dx0{power: 1.0} * ctrl{power: 1.0} + 0.0 * d^2y/dx0^2{power: 1.0} + 0.0 * ctrl{power: 1.0} + 4.582157284178204 * y{power: 2.0} * dy/dx0{power: 1.0} + 0.0 * d^2y/dx0^2{power: 1.0} * cos(phi){power: 2.0, freq: 0.9999999994076549} + 0.0 * dy/dx0{power: 1.0} * cos(phi){power: 2.0, freq: 1.000000002407469} * y{power: 2.0} + 0.17428750224036788 * dy/dx0{power: 1.0} * cos(phi){power: 1.0, freq: 0.9999999965185964} + 0.9375578047045513 * dphi/dx0{power: 1.0} + 0.0 * phi{power: 1.0} * d^2y/dx0^2{power: 1.0} + 0.0015002827915461675 = cos(phi){power: 2.0, freq: 0.999999998391147} * dphi/dx0{power: 1.0}
{'terms_number': {'optimizable': False, 'value': 10}, 'max_factors_in_term': {'optimizable': False, 'value': {'factors_num': [1, 2, 3], 'probas': [0.2, 0.65, 0.15]}}, ('sparsity', 'phi'): {'optimizable': True, 'value': np.float64(0.0032225728479844257)}, ('sparsity', 'y'): {'optimizable': True, 'value': np.float64(0.0037009634084329197)}} , with objective function values of [0.00999561 0.40414555 4.         5.5       ] 

 / 0.0 * sign(dy/dx1){power: 1.0} * y{power: 1.0} + 0.0 * cos(phi){power: 1.0, freq: 1.000000002045356} + 0.0 * cos(phi){power: 2.0, freq: 0.9999999993097775} * dy/dx0{power: 1.0} + 0.0 * dphi/dx0{power: 1.0} * ctrl{power: 1.0} + 0.0 * phi{power: 2.0} * y{power: 1.0} + -3.017266845870816 * cos(phi){power: 1.0, freq: 1.0000000068439405} * d^2y/dx0^2{power: 1.0} + 0.0 * dy/dx0{power: 1.0} * d^2y/dx0^2{power: 1.0} + 0.0 * sign(dy/dx1){power: 1.0} * sin(phi){power: 2.0, freq: 0.9999999930092436} + 0.0 * sign(dy/dx1){power: 1.0} + 0.01801455606548322 = phi{power: 1.0} * d^2y/dx0^2{power: 1.0}
 \ -3.0134119530084558 * cos(phi){power: 1.0, freq: 0.9999999974913385} * dphi/dx0{power: 1.0} + 0.0 * d^2y/dx0^2{power: 1.0} * dy/dx0{power: 1.0} + 0.0 * y{power: 1.0} * ctrl{power: 1.0} + 0.0 * d^2phi/dx0^2{power: 1.0} + 0.0 * d^2y/dx0^2{power: 1.0} * sin(phi){power: 1.0, freq: 1.000000001857411} + -0.02972855937085118 * y{power: 1.0} * phi{power: 1.0} + 0.0 * sin(phi){power: 1.0, freq: 0.9999999966530301} * d^2y/dx0^2{power: 1.0} * dy/dx0{power: 1.0} + 0.0 * dy/dx0{power: 1.0} * phi{power: 2.0} + 0.0 * d^2y/dx0^2{power: 1.0} * y{power: 1.0} + 0.001816052735187701 = dphi/dx0{power: 1.0} * phi{power: 1.0}
{'terms_number': {'optimizable': False, 'value': 10}, 'max_factors_in_term': {'optimizable': False, 'value': {'factors_num': [1, 2, 3], 'probas': [0.2, 0.65, 0.15]}}, ('sparsity', 'phi'): {'optimizable': True, 'value': np.float64(0.004772580527107408)}, ('sparsity', 'y'): {'optimizable': True, 'value': np.float64(0.006291361208050356)}} , with objective function values of [1.3529934  0.58305942 5.         4.        ] 

 / 0.0 * dphi/dx0{power: 1.0} * cos(phi){power: 2.0, freq: 1.0000000093777572} + 0.0 * y{power: 2.0} * dphi/dx0{power: 1.0} + 0.0 * sin(phi){power: 2.0, freq: 0.9999999918642545} * y{power: 1.0} + 0.0 * phi{power: 1.0} * d^2y/dx0^2{power: 1.0} + 0.0 * dphi/dx0{power: 1.0} * y{power: 1.0} * phi{power: 2.0} + 0.38285895777716467 * phi{power: 1.0} * cos(phi){power: 2.0, freq: 0.9999999993322172} * dy/dx0{power: 1.0} + 0.0 * phi{power: 1.0} * sin(phi){power: 2.0, freq: 0.9999999925172633} + 0.0 * d^2y/dx0^2{power: 1.0} * dphi/dx0{power: 1.0} + 1.8831417717674974 * dy/dx0{power: 1.0} + 0.019409626758083776 = phi{power: 1.0} * dy/dx0{power: 1.0}
 \ 0.0 * cos(phi){power: 2.0, freq: 1.000000001654848} * dy/dx0{power: 1.0} + -0.04690512152983348 * dphi/dx0{power: 1.0} * ctrl{power: 1.0} * sign(dy/dx1){power: 1.0} + 0.0 * sin(phi){power: 1.0, freq: 1.0000000048910052} * phi{power: 1.0} + 0.0 * sin(phi){power: 2.0, freq: 1.0000000097434172} * y{power: 1.0} + -0.9427405709930482 * dphi/dx0{power: 1.0} + 0.0 * ctrl{power: 1.0} + 0.0 * sin(phi){power: 2.0, freq: 1.0000000085716092} * phi{power: 2.0} + 0.0 * sin(phi){power: 1.0, freq: 0.999999992065412} * ctrl{power: 1.0} + 0.0 * d^2y/dx0^2{power: 1.0} * ctrl{power: 1.0} + -0.001543318634408375 = dphi/dx0{power: 1.0} * cos(phi){power: 1.0, freq: 0.9999999956525998}
{'terms_number': {'optimizable': False, 'value': 10}, 'max_factors_in_term': {'optimizable': False, 'value': {'factors_num': [1, 2, 3], 'probas': [0.2, 0.65, 0.15]}}, ('sparsity', 'phi'): {'optimizable': True, 'value': np.float64(0.007924305761066166)}, ('sparsity', 'y'): {'optimizable': True, 'value': np.float64(0.00443615163901815)}} , with objective function values of [0.1484241 0.3986784 4.5       8.5      ] 

 / -5.1612853844762565 * sin(phi){power: 2.0, freq: 0.9999999990352297} + 0.0 * dphi/dx0{power: 1.0} * phi{power: 1.0} + 0.09357737634519808 * phi{power: 2.0} + 0.12474203431353706 * dphi/dx0{power: 1.0} + 0.7002944537052695 * phi{power: 1.0} * dy/dx0{power: 1.0} * y{power: 1.0} + 0.0 * y{power: 1.0} * d^2phi/dx0^2{power: 1.0} + 0.0 * phi{power: 2.0} * d^2y/dx0^2{power: 1.0} + 0.0 * sign(dy/dx1){power: 1.0} * sin(phi){power: 2.0, freq: 0.9999999930092436} + 0.0 * dphi/dx0{power: 1.0} * d^2phi/dx0^2{power: 1.0} + -0.7237236577330995 = dy/dx0{power: 1.0}
 \ 0.0 * dphi/dx0{power: 1.0} * sign(dy/dx1){power: 1.0} + -1.451782994610567 * cos(phi){power: 1.0, freq: 1.000000009141247} * d^2y/dx0^2{power: 1.0} + -0.000768251729796221 * dy/dx0{power: 1.0} + 0.010928011085066913 * ctrl{power: 1.0} * sin(phi){power: 1.0, freq: 0.9999999922685616} + 0.0 * sign(dy/dx1){power: 1.0} * d^2phi/dx0^2{power: 1.0} + 14.242809849212739 * sin(phi){power: 1.0, freq: 1.000000004984405} + 0.0 * y{power: 2.0} * dphi/dx0{power: 1.0} + 0.0 * cos(phi){power: 2.0, freq: 0.9999999931650208} * sign(dy/dx1){power: 1.0} + 0.0 * phi{power: 2.0} * d^2y/dx0^2{power: 1.0} + 3.4150417263290045e-05 = d^2phi/dx0^2{power: 1.0}
{'terms_number': {'optimizable': False, 'value': 10}, 'max_factors_in_term': {'optimizable': False, 'value': {'factors_num': [1, 2, 3], 'probas': [0.2, 0.65, 0.15]}}, ('sparsity', 'phi'): {'optimizable': True, 'value': np.float64(0.0037958420940070953)}, ('sparsity', 'y'): {'optimizable': True, 'value': np.float64(0.004096597173891196)}} , with objective function values of [2.85681062e-01 3.56489611e-03 6.00000000e+00 1.05000000e+01] 

 / 0.0 * y{power: 2.0} * cos(phi){power: 2.0, freq: 0.9999999901271732} + 2.6115870968676775 * dy/dx0{power: 1.0} * sin(phi){power: 2.0, freq: 0.9999999969556452} + 0.0 * sin(phi){power: 2.0, freq: 1.0000000004651528} * dphi/dx0{power: 1.0} + 0.0 * cos(phi){power: 1.0, freq: 1.0000000096761805} * ctrl{power: 1.0} + 0.07639659954245427 * dy/dx0{power: 1.0} * y{power: 1.0} + 0.0 * phi{power: 2.0} * sin(phi){power: 1.0, freq: 1.0000000087405345} + 0.0 * cos(phi){power: 2.0, freq: 1.000000002980359} * sign(dy/dx1){power: 1.0} * d^2phi/dx0^2{power: 1.0} + 0.0 * d^2phi/dx0^2{power: 1.0} * phi{power: 2.0} + 0.0 * cos(phi){power: 2.0, freq: 0.9999999930195834} * ctrl{power: 1.0} + -0.0022934412177237212 = dy/dx0{power: 1.0} * sin(phi){power: 2.0, freq: 0.9999999913651354} * phi{power: 1.0}
 \ -3.030486535646081 * cos(phi){power: 1.0, freq: 0.9999999952898623} * dphi/dx0{power: 1.0} + 0.0 * phi{power: 1.0} * sign(dy/dx1){power: 1.0} * dphi/dx0{power: 1.0} + 0.0 * cos(phi){power: 1.0, freq: 0.9999999934458729} * y{power: 2.0} + 0.0 * sin(phi){power: 1.0, freq: 1.0000000056617016} * d^2y/dx0^2{power: 1.0} + 0.0 * dy/dx0{power: 1.0} * d^2phi/dx0^2{power: 1.0} + 0.0 * d^2y/dx0^2{power: 1.0} * cos(phi){power: 2.0, freq: 0.9999999941443078} + 0.03750678727141849 * dphi/dx0{power: 1.0} * sign(dy/dx1){power: 1.0} + 0.0 * sin(phi){power: 1.0, freq: 1.000000004984405} + 0.0 * d^2phi/dx0^2{power: 1.0} * d^2y/dx0^2{power: 1.0} + -0.009430111065995093 = phi{power: 1.0} * dphi/dx0{power: 1.0}
{'terms_number': {'optimizable': False, 'value': 10}, 'max_factors_in_term': {'optimizable': False, 'value': {'factors_num': [1, 2, 3], 'probas': [0.2, 0.65, 0.15]}}, ('sparsity', 'phi'): {'optimizable': True, 'value': np.float64(0.003236846906526255)}, ('sparsity', 'y'): {'optimizable': True, 'value': np.float64(0.003855890352479141)}} , with objective function values of [0.06258608 0.45694273 6.5        5.        ] 

 / 0.0 * sign(dy/dx1){power: 1.0} * cos(phi){power: 2.0, freq: 1.0000000028075204} + 0.0 * ctrl{power: 1.0} + 0.0 * sign(dy/dx1){power: 1.0} + 0.0 * cos(phi){power: 1.0, freq: 0.9999999953459553} * d^2phi/dx0^2{power: 1.0} + -0.3274149343832641 * dy/dx0{power: 1.0} * phi{power: 1.0} + 0.0 * ctrl{power: 1.0} * phi{power: 1.0} * d^2phi/dx0^2{power: 1.0} + 0.0 * sin(phi){power: 2.0, freq: 1.0000000002847145} * d^2y/dx0^2{power: 1.0} + 0.0 * dphi/dx0{power: 1.0} * sign(dy/dx1){power: 1.0} + 0.0 * dphi/dx0{power: 1.0} * d^2phi/dx0^2{power: 1.0} + 0.010103592595454545 = dy/dx0{power: 1.0} * cos(phi){power: 1.0, freq: 1.0000000064926624}
 \ 2.012782823308571 * phi{power: 2.0} * y{power: 2.0} * sin(phi){power: 1.0, freq: 0.9999999981142348} + 0.0 * d^2y/dx0^2{power: 1.0} * sign(dy/dx1){power: 1.0} + 0.0 * sin(phi){power: 1.0, freq: 0.9999999912281955} * d^2phi/dx0^2{power: 1.0} + 0.043996374210609965 * dphi/dx0{power: 1.0} * phi{power: 1.0} + 0.1316497574311057 * cos(phi){power: 2.0, freq: 0.9999999931107262} * sign(dy/dx1){power: 1.0} + -0.09014679957737816 * dphi/dx0{power: 1.0} * sign(dy/dx1){power: 1.0} + 0.0 * d^2phi/dx0^2{power: 1.0} + 0.0 * dphi/dx0{power: 1.0} * y{power: 2.0} + 0.0 * y{power: 1.0} + -0.13417646506094122 = dphi/dx0{power: 1.0} * sin(phi){power: 1.0, freq: 1.0000000045417787}
{'terms_number': {'optimizable': False, 'value': 10}, 'max_factors_in_term': {'optimizable': False, 'value': {'factors_num': [1, 2, 3], 'probas': [0.2, 0.65, 0.15]}}, ('sparsity', 'phi'): {'optimizable': True, 'value': np.float64(0.01311764428073667)}, ('sparsity', 'y'): {'optimizable': True, 'value': np.float64(0.0076335568035858295)}} , with objective function values of [0.09903637 0.87942172 3.         8.        ] 

 / 0.0 * sign(dy/dx1){power: 1.0} * ctrl{power: 1.0} + 0.9509955058842031 * dy/dx0{power: 1.0} + -1.0076524060868925 * y{power: 2.0} + -2.0931076070643564 * dy/dx0{power: 1.0} * cos(phi){power: 1.0, freq: 0.9999999997402265} + 0.0 * y{power: 2.0} * dy/dx0{power: 1.0} + 0.0 * d^2phi/dx0^2{power: 1.0} * sin(phi){power: 1.0, freq: 0.9999999926100581} + 0.0 * ctrl{power: 1.0} * y{power: 1.0} + -0.11690914196701074 * cos(phi){power: 2.0, freq: 0.9999999910358738} * phi{power: 1.0} + 0.0 * dphi/dx0{power: 1.0} * dy/dx0{power: 1.0} + 0.43316367014542057 = dy/dx0{power: 1.0} * phi{power: 1.0}
 \ 0.0 * d^2phi/dx0^2{power: 1.0} + 0.0 * phi{power: 1.0} * sign(dy/dx1){power: 1.0} + 0.0 * y{power: 2.0} * dphi/dx0{power: 1.0} + 0.0 * sin(phi){power: 2.0, freq: 1.0000000029865719} * phi{power: 1.0} + -1.0447194516181912 * cos(phi){power: 1.0, freq: 1.0000000048518165} * dphi/dx0{power: 1.0} + -0.03538695222827787 * dphi/dx0{power: 1.0} * sign(dy/dx1){power: 1.0} + 0.0 * d^2y/dx0^2{power: 1.0} * sign(dy/dx1){power: 1.0} + 0.0 * phi{power: 1.0} + 0.0 * cos(phi){power: 1.0, freq: 0.9999999918826884} + 0.00706628077914679 = dphi/dx0{power: 1.0}
{'terms_number': {'optimizable': False, 'value': 10}, 'max_factors_in_term': {'optimizable': False, 'value': {'factors_num': [1, 2, 3], 'probas': [0.2, 0.65, 0.15]}}, ('sparsity', 'phi'): {'optimizable': True, 'value': np.float64(0.004265005718922814)}, ('sparsity', 'y'): {'optimizable': True, 'value': np.float64(0.006263235793626979)}} , with objective function values of [0.14189179 0.3562687  6.         4.5       ] 

 / -0.9966096213868747 * dy/dx0{power: 1.0} * cos(phi){power: 1.0, freq: 0.9999999956313366} + 0.55346851738368 * dy/dx0{power: 1.0} * sin(phi){power: 2.0, freq: 0.9999999924612774} + 0.0 * sign(dy/dx1){power: 1.0} + 0.0 * dy/dx0{power: 1.0} * phi{power: 2.0} + 0.0 * phi{power: 2.0} * d^2phi/dx0^2{power: 1.0} + 0.0 * dphi/dx0{power: 1.0} * sin(phi){power: 1.0, freq: 0.9999999989063736} + 0.0 * ctrl{power: 1.0} * sign(dy/dx1){power: 1.0} + 0.0 * dphi/dx0{power: 1.0} * dy/dx0{power: 1.0} + 0.0 * ctrl{power: 1.0} * phi{power: 1.0} + 0.0006554881207435082 = dy/dx0{power: 1.0}
 \ 0.0 * sign(dy/dx1){power: 1.0} * phi{power: 2.0} + 0.0 * sin(phi){power: 1.0, freq: 1.0000000013671073} * sign(dy/dx1){power: 1.0} + 0.0 * dy/dx0{power: 1.0} + 0.0 * ctrl{power: 1.0} + 0.0 * y{power: 1.0} * sign(dy/dx1){power: 1.0} + 2.329881863495526 * dphi/dx0{power: 1.0} * sin(phi){power: 1.0, freq: 1.0000000013020336} + 0.0 * dphi/dx0{power: 1.0} * cos(phi){power: 1.0, freq: 0.9999999995328573} + -0.7126518611869552 * dphi/dx0{power: 1.0} * sin(phi){power: 1.0, freq: 1.0000000089810739} * sign(dy/dx1){power: 1.0} + 0.0 * y{power: 1.0} * dphi/dx0{power: 1.0} + 0.0280107592789412 = dphi/dx0{power: 1.0} * phi{power: 2.0} * sin(phi){power: 2.0, freq: 1.000000002917331}
{'terms_number': {'optimizable': False, 'value': 10}, 'max_factors_in_term': {'optimizable': False, 'value': {'factors_num': [1, 2, 3], 'probas': [0.2, 0.65, 0.15]}}, ('sparsity', 'phi'): {'optimizable': True, 'value': np.float64(0.007034882175591131)}, ('sparsity', 'y'): {'optimizable': True, 'value': np.float64(0.0020399151564388807)}} , with objective function values of [0.00882335 1.50852626 5.5        8.        ] 

 / 0.0 * d^2phi/dx0^2{power: 1.0} + 0.0 * y{power: 2.0} * dphi/dx0{power: 1.0} + 0.0 * dy/dx0{power: 1.0} * y{power: 1.0} * sin(phi){power: 1.0, freq: 1.0000000041440114} + -0.3311978067736628 * phi{power: 1.0} * d^2y/dx0^2{power: 1.0} + 0.0 * cos(phi){power: 2.0, freq: 0.999999994533283} * y{power: 2.0} + 0.0 * phi{power: 1.0} * sin(phi){power: 2.0, freq: 0.9999999925172633} + 0.0 * phi{power: 1.0} * dy/dx0{power: 1.0} + 0.0 * phi{power: 1.0} * cos(phi){power: 1.0, freq: 0.999999996706341} + -0.021350576550436415 * dy/dx0{power: 1.0} + 0.002573264369919266 = d^2y/dx0^2{power: 1.0} * cos(phi){power: 1.0, freq: 0.9999999924294158}
 \ 0.0 * ctrl{power: 1.0} * dy/dx0{power: 1.0} + -3.024905492952537 * cos(phi){power: 1.0, freq: 0.9999999921619289} * dphi/dx0{power: 1.0} + 0.0 * d^2phi/dx0^2{power: 1.0} * phi{power: 1.0} * d^2y/dx0^2{power: 1.0} + 0.0 * ctrl{power: 1.0} * sin(phi){power: 2.0, freq: 0.999999992860245} + 0.0 * d^2y/dx0^2{power: 1.0} * dy/dx0{power: 1.0} + 0.0 * dphi/dx0{power: 1.0} * ctrl{power: 1.0} * sign(dy/dx1){power: 1.0} + 0.0 * sin(phi){power: 1.0, freq: 1.0000000048910052} * phi{power: 1.0} + 0.0 * dy/dx0{power: 1.0} * phi{power: 1.0} + 0.0 * ctrl{power: 1.0} * dphi/dx0{power: 1.0} + -0.004693385578423884 = phi{power: 1.0} * dphi/dx0{power: 1.0}
{'terms_number': {'optimizable': False, 'value': 10}, 'max_factors_in_term': {'optimizable': False, 'value': {'factors_num': [1, 2, 3], 'probas': [0.2, 0.65, 0.15]}}, ('sparsity', 'phi'): {'optimizable': True, 'value': np.float64(0.005092254015637181)}, ('sparsity', 'y'): {'optimizable': True, 'value': np.float64(0.0045405616754498794)}} , with objective function values of [0.41602299 0.601131   6.         3.        ] 

 / 0.0 * d^2phi/dx0^2{power: 1.0} * phi{power: 2.0} + 0.0 * dphi/dx0{power: 1.0} + 0.0 * dphi/dx0{power: 1.0} * cos(phi){power: 2.0, freq: 0.9999999953910809} + -10.395209383003444 * sin(phi){power: 1.0, freq: 0.9999999965692778} * dy/dx0{power: 1.0} + 0.0 * sign(dy/dx1){power: 1.0} * phi{power: 2.0} + 0.0 * ctrl{power: 1.0} * sign(dy/dx1){power: 1.0} + -0.15793970386928158 * sin(phi){power: 1.0, freq: 1.0000000046606425} * dphi/dx0{power: 1.0} + 0.0 * sign(dy/dx1){power: 1.0} + 0.7510669535373061 * d^2phi/dx0^2{power: 1.0} * dy/dx0{power: 1.0} + -0.013983017287484564 = d^2y/dx0^2{power: 1.0} * dy/dx0{power: 1.0}
 \ -0.3246157898603617 * phi{power: 1.0} * dphi/dx0{power: 1.0} + 0.0 * phi{power: 1.0} + -0.011277034108880087 * dy/dx0{power: 1.0} + -0.0006942569740456504 * phi{power: 2.0} * d^2y/dx0^2{power: 1.0} + 0.0 * dphi/dx0{power: 1.0} * sin(phi){power: 2.0, freq: 1.0000000030743281} + 0.0 * dphi/dx0{power: 1.0} * dy/dx0{power: 1.0} + 0.0 * sign(dy/dx1){power: 1.0} + 0.0 * cos(phi){power: 2.0, freq: 1.0000000034240248} * d^2phi/dx0^2{power: 1.0} + 0.0 * phi{power: 1.0} * cos(phi){power: 2.0, freq: 0.9999999911894097} + -0.0022576553878956916 = cos(phi){power: 1.0, freq: 1.000000007506453} * dphi/dx0{power: 1.0}
{'terms_number': {'optimizable': False, 'value': 10}, 'max_factors_in_term': {'optimizable': False, 'value': {'factors_num': [1, 2, 3], 'probas': [0.2, 0.65, 0.15]}}, ('sparsity', 'phi'): {'optimizable': True, 'value': np.float64(0.0043762761142745145)}, ('sparsity', 'y'): {'optimizable': True, 'value': np.float64(0.006779598031968326)}} , with objective function values of [1.05275004 0.16374435 9.         6.5       ] 

 / 0.0 * y{power: 2.0} * cos(phi){power: 2.0, freq: 0.9999999901271732} + 2.487291373377528 * dy/dx0{power: 1.0} * sin(phi){power: 2.0, freq: 0.9999999969556452} + 0.0 * d^2y/dx0^2{power: 1.0} * sin(phi){power: 2.0, freq: 1.0000000085406289} + 0.0 * sin(phi){power: 1.0, freq: 1.0000000087097232} * d^2phi/dx0^2{power: 1.0} + 0.0 * ctrl{power: 1.0} * sign(dy/dx1){power: 1.0} + 0.0 * dy/dx0{power: 1.0} * ctrl{power: 1.0} + -0.027258974264494792 * cos(phi){power: 1.0, freq: 1.0000000090426313} * dy/dx0{power: 1.0} + 0.0 * y{power: 2.0} * d^2phi/dx0^2{power: 1.0} + 0.0 * cos(phi){power: 2.0, freq: 0.9999999930195834} * ctrl{power: 1.0} + -0.004934290464423638 = dy/dx0{power: 1.0} * sin(phi){power: 2.0, freq: 0.9999999913651354} * phi{power: 1.0}
 \ -3.024905485882763 * cos(phi){power: 1.0, freq: 0.9999999952898623} * dphi/dx0{power: 1.0} + 0.0 * cos(phi){power: 2.0, freq: 0.999999996438087} * d^2phi/dx0^2{power: 1.0} + 0.0 * cos(phi){power: 1.0, freq: 0.9999999934458729} * y{power: 2.0} + 0.0 * sin(phi){power: 1.0, freq: 1.0000000056617016} * d^2y/dx0^2{power: 1.0} + 0.0 * dy/dx0{power: 1.0} * d^2phi/dx0^2{power: 1.0} + 0.0 * phi{power: 2.0} * cos(phi){power: 1.0, freq: 1.0000000054736213} + 0.0 * y{power: 1.0} * dy/dx0{power: 1.0} + 0.0 * sin(phi){power: 1.0, freq: 1.000000004984405} + 0.0 * ctrl{power: 1.0} * sin(phi){power: 2.0, freq: 0.9999999969522008} + -0.004693385912345924 = dphi/dx0{power: 1.0} * phi{power: 1.0}
{'terms_number': {'optimizable': False, 'value': 10}, 'max_factors_in_term': {'optimizable': False, 'value': {'factors_num': [1, 2, 3], 'probas': [0.2, 0.65, 0.15]}}, ('sparsity', 'phi'): {'optimizable': True, 'value': np.float64(0.003684394108313095)}, ('sparsity', 'y'): {'optimizable': True, 'value': np.float64(0.004147731251459141)}} , with objective function values of [0.05898655 0.60113103 6.5        3.        ] 

 / 0.09422740519715314 * dy/dx0{power: 1.0} * sign(dy/dx1){power: 1.0} + -0.5269036079376579 * ctrl{power: 1.0} + -0.5740062189740519 * dphi/dx0{power: 1.0} + 0.04985130678614279 * dphi/dx0{power: 1.0} * dy/dx0{power: 1.0} + 6.843783327153963e-05 * phi{power: 1.0} * d^2phi/dx0^2{power: 1.0} + 0.0463599539413993 * phi{power: 2.0} * cos(phi){power: 1.0, freq: 0.999999994570179} + 5.561745569610723 * y{power: 2.0} + -0.019352790183845867 * ctrl{power: 1.0} * sign(dy/dx1){power: 1.0} + -1.286883286549971 * phi{power: 1.0} * y{power: 1.0} + 0.532653164907081 = cos(phi){power: 1.0, freq: 0.9999999990330768} * dy/dx0{power: 1.0}
 \ 0.0 * dphi/dx0{power: 1.0} + 7.410292127194975e-07 * ctrl{power: 1.0} * cos(phi){power: 2.0, freq: 0.9999999942419897} * y{power: 2.0} + 0.0 * ctrl{power: 1.0} * dy/dx0{power: 1.0} + 0.999999997954317 * d^2phi/dx0^2{power: 1.0} + 0.0 * ctrl{power: 1.0} * dphi/dx0{power: 1.0} * d^2phi/dx0^2{power: 1.0} + 0.0 * dy/dx0{power: 1.0} * dphi/dx0{power: 1.0} * phi{power: 2.0} + 3.3574001495617622e-09 * d^2y/dx0^2{power: 1.0} * dy/dx0{power: 1.0} * sin(phi){power: 1.0, freq: 0.9999999941852702} + -1.1731643989598695e-09 * dy/dx0{power: 1.0} * d^2phi/dx0^2{power: 1.0} + -0.9999999714245557 * d^2phi/dx0^2{power: 1.0} * sin(phi){power: 2.0, freq: 0.9999999999654937} + 1.4488951054561494e-09 = cos(phi){power: 2.0, freq: 1.0000000034240248} * d^2phi/dx0^2{power: 1.0}
{'terms_number': {'optimizable': False, 'value': 10}, 'max_factors_in_term': {'optimizable': False, 'value': {'factors_num': [1, 2, 3], 'probas': [0.2, 0.65, 0.15]}}, ('sparsity', 'phi'): {'optimizable': True, 'value': np.float64(0.0026498565246918892)}, ('sparsity', 'y'): {'optimizable': True, 'value': np.float64(0.003403306130043182)}} , with objective function values of [8.06988906e-02 3.57278315e-08 2.10000000e+01 2.60000000e+01] 

 / 0.0 * cos(phi){power: 1.0, freq: 0.9999999905059705} + 0.0 * dphi/dx0{power: 1.0} * sign(dy/dx1){power: 1.0} + -0.3962578321261709 * y{power: 2.0} * phi{power: 1.0} + 1.0572578841576703 * dy/dx0{power: 1.0} * sin(phi){power: 1.0, freq: 1.0000000031829697} + 2.896791723664813 * dy/dx0{power: 1.0} * cos(phi){power: 2.0, freq: 0.9999999943859321} + 0.0 * sin(phi){power: 2.0, freq: 0.9999999993267954} * phi{power: 1.0} + 0.0 * y{power: 1.0} * ctrl{power: 1.0} + 0.0 * y{power: 2.0} * sin(phi){power: 1.0, freq: 1.0000000011758714} + 0.0 * sign(dy/dx1){power: 1.0} * ctrl{power: 1.0} + 0.12082125535788579 = phi{power: 1.0} * dy/dx0{power: 1.0}
 \ -0.6325395043763213 * sin(phi){power: 2.0, freq: 0.999999997376621} + -1.0115804094305265 * cos(phi){power: 1.0, freq: 0.9999999921619289} * dphi/dx0{power: 1.0} + 0.0 * dphi/dx0{power: 1.0} * d^2phi/dx0^2{power: 1.0} + 0.0 * dphi/dx0{power: 1.0} * phi{power: 1.0} + 12.306725214863091 * sin(phi){power: 2.0, freq: 1.0000000005858332} * y{power: 2.0} + 0.0 * d^2phi/dx0^2{power: 1.0} + 0.0 * d^2phi/dx0^2{power: 1.0} * dy/dx0{power: 1.0} + 0.0 * d^2phi/dx0^2{power: 1.0} * cos(phi){power: 1.0, freq: 0.9999999928295236} + 0.40675296156775237 * dy/dx0{power: 1.0} * sin(phi){power: 1.0, freq: 1.0000000099695792} * y{power: 1.0} + 0.0026636803957013067 = dphi/dx0{power: 1.0}
{'terms_number': {'optimizable': False, 'value': 10}, 'max_factors_in_term': {'optimizable': False, 'value': {'factors_num': [1, 2, 3], 'probas': [0.2, 0.65, 0.15]}}, ('sparsity', 'phi'): {'optimizable': True, 'value': np.float64(0.0030219342424258047)}, ('sparsity', 'y'): {'optimizable': True, 'value': np.float64(0.0023050420046502305)}} , with objective function values of [0.33325197 0.07323361 7.         7.5       ] 

 / -0.03185906318059043 * cos(phi){power: 2.0, freq: 0.9999999972869376} * phi{power: 2.0} * sign(dy/dx1){power: 1.0} + 0.06692835651819479 * cos(phi){power: 2.0, freq: 0.9999999946689887} * dy/dx0{power: 1.0} + -0.30809084871867864 * cos(phi){power: 1.0, freq: 0.999999992893618} * sign(dy/dx1){power: 1.0} + 0.0017787011421161597 * d^2y/dx0^2{power: 1.0} + 0.0 * sin(phi){power: 1.0, freq: 1.0000000005135212} * d^2phi/dx0^2{power: 1.0} * phi{power: 2.0} + 0.0 * sin(phi){power: 1.0, freq: 1.0000000077401434} * phi{power: 2.0} * d^2y/dx0^2{power: 1.0} + -0.026531193851121293 * d^2phi/dx0^2{power: 1.0} * dy/dx0{power: 1.0} + 0.05998780897630359 * ctrl{power: 1.0} * sign(dy/dx1){power: 1.0} + -0.03644834808994684 * sign(dy/dx1){power: 1.0} * dphi/dx0{power: 1.0} + 0.02359609951744926 = dy/dx0{power: 1.0} * y{power: 1.0}
 \ 0.0 * y{power: 2.0} * ctrl{power: 1.0} + 0.0 * sin(phi){power: 1.0, freq: 1.0000000013671073} * sign(dy/dx1){power: 1.0} + 0.0 * y{power: 1.0} * sin(phi){power: 1.0, freq: 0.9999999987507555} + 0.0 * d^2phi/dx0^2{power: 1.0} * dphi/dx0{power: 1.0} + 0.0 * dphi/dx0{power: 1.0} + 0.0 * sign(dy/dx1){power: 1.0} * sin(phi){power: 2.0, freq: 0.9999999915376577} + -0.06243867400685921 * y{power: 1.0} + -3.0165242033964246 * dphi/dx0{power: 1.0} * cos(phi){power: 1.0, freq: 0.9999999995328573} + 0.0 * sin(phi){power: 1.0, freq: 0.9999999924784617} * d^2y/dx0^2{power: 1.0} + -0.0006525767827756379 = phi{power: 1.0} * dphi/dx0{power: 1.0}
{'terms_number': {'optimizable': False, 'value': 10}, 'max_factors_in_term': {'optimizable': False, 'value': {'factors_num': [1, 2, 3], 'probas': [0.2, 0.65, 0.15]}}, ('sparsity', 'phi'): {'optimizable': True, 'value': np.float64(0.004376143371281842)}, ('sparsity', 'y'): {'optimizable': True, 'value': np.float64(0.0005873619649612561)}} , with objective function values of [ 0.12635713  0.5897247  18.5         3.5       ] 

 / 1.9957305124964695 * cos(phi){power: 2.0, freq: 0.9999999952239609} + 0.16306598112185622 * y{power: 1.0} + 0.0 * sin(phi){power: 2.0, freq: 1.0000000029611493} * d^2phi/dx0^2{power: 1.0} + 0.0 * sign(dy/dx1){power: 1.0} * phi{power: 2.0} + 0.0 * sin(phi){power: 2.0, freq: 0.9999999990352297} + 0.0 * cos(phi){power: 1.0, freq: 0.9999999978876365} + -0.056941805537948254 * y{power: 1.0} * d^2phi/dx0^2{power: 1.0} + 0.039343874773647314 * dy/dx0{power: 1.0} * phi{power: 1.0} + 0.0 * ctrl{power: 1.0} + -2.057911832674977 = sin(phi){power: 1.0, freq: 0.9999999902864156} * dy/dx0{power: 1.0}
 \ -1.4520666325809892 * cos(phi){power: 1.0, freq: 1.000000006805185} * d^2y/dx0^2{power: 1.0} + 0.00046347611233632513 * dy/dx0{power: 1.0} * cos(phi){power: 2.0, freq: 0.9999999948437774} + 0.0 * d^2y/dx0^2{power: 1.0} * cos(phi){power: 1.0, freq: 0.9999999908533871} * ctrl{power: 1.0} + 0.0 * cos(phi){power: 2.0, freq: 1.0000000073043642} + 0.0 * dphi/dx0{power: 1.0} + 0.0 * sign(dy/dx1){power: 1.0} * d^2phi/dx0^2{power: 1.0} + 14.246710443787412 * sin(phi){power: 1.0, freq: 1.000000004984405} + 0.0 * dy/dx0{power: 1.0} * sin(phi){power: 1.0, freq: 0.9999999914652986} + 0.0 * cos(phi){power: 1.0, freq: 0.9999999900958836} + -0.0001308614502719685 = d^2phi/dx0^2{power: 1.0}
{'terms_number': {'optimizable': False, 'value': 10}, 'max_factors_in_term': {'optimizable': False, 'value': {'factors_num': [1, 2, 3], 'probas': [0.2, 0.65, 0.15]}}, ('sparsity', 'phi'): {'optimizable': True, 'value': np.float64(0.004890525874367124)}, ('sparsity', 'y'): {'optimizable': True, 'value': np.float64(0.007629354685992811)}} , with objective function values of [1.75568304e-01 5.72783469e-03 7.00000000e+00 8.00000000e+00] 

 / 0.10144819153871941 * phi{power: 2.0} * dy/dx0{power: 1.0} + 0.0 * sin(phi){power: 1.0, freq: 1.000000003293538} * dphi/dx0{power: 1.0} + 0.6124836240454661 * sin(phi){power: 1.0, freq: 0.9999999908083824} * dy/dx0{power: 1.0} + 0.0 * sign(dy/dx1){power: 1.0} * d^2phi/dx0^2{power: 1.0} + 0.0 * sign(dy/dx1){power: 1.0} * ctrl{power: 1.0} * sin(phi){power: 2.0, freq: 1.000000005385662} + 0.0 * phi{power: 2.0} + 0.0 * ctrl{power: 1.0} * sign(dy/dx1){power: 1.0} + 0.0 * sin(phi){power: 1.0, freq: 1.0000000044003512} + -0.00047837562062136296 * phi{power: 2.0} * cos(phi){power: 2.0, freq: 1.000000000608898} + 0.004049252787135166 = dy/dx0{power: 1.0}
 \ -0.01351230059920655 * sign(dy/dx1){power: 1.0} * phi{power: 2.0} + 1.4426784828344497 * sin(phi){power: 1.0, freq: 1.0000000013671073} * sign(dy/dx1){power: 1.0} + 0.2292223068890341 * dphi/dx0{power: 1.0} * dy/dx0{power: 1.0} + -0.04329933344311354 * cos(phi){power: 2.0, freq: 0.9999999936725441} * d^2phi/dx0^2{power: 1.0} * y{power: 2.0} + -2.877227945505823 * y{power: 2.0} + 0.439437925128332 * dy/dx0{power: 1.0} * sign(dy/dx1){power: 1.0} + 0.0 * dphi/dx0{power: 1.0} * phi{power: 2.0} * sin(phi){power: 2.0, freq: 1.000000002917331} + 0.0 * phi{power: 1.0} * d^2y/dx0^2{power: 1.0} + 0.0008473329025925902 * dphi/dx0{power: 1.0} + 0.1709334537498699 = dphi/dx0{power: 1.0} * sin(phi){power: 1.0, freq: 1.0000000089810739} * sign(dy/dx1){power: 1.0}
{'terms_number': {'optimizable': False, 'value': 10}, 'max_factors_in_term': {'optimizable': False, 'value': {'factors_num': [1, 2, 3], 'probas': [0.2, 0.65, 0.15]}}, ('sparsity', 'phi'): {'optimizable': True, 'value': np.float64(0.003271829182795834)}, ('sparsity', 'y'): {'optimizable': True, 'value': np.float64(0.007755344577068718)}} , with objective function values of [4.66244042e-03 1.09279082e+00 6.00000000e+00 1.90000000e+01] 

 / 7.990873898564053e-06 * sign(dy/dx1){power: 1.0} * d^2phi/dx0^2{power: 1.0} + -0.44831129762441896 * dy/dx0{power: 1.0} * sin(phi){power: 2.0, freq: 1.0000000036582737} + 0.0 * y{power: 2.0} * dphi/dx0{power: 1.0} + -1.0033653406128278 * cos(phi){power: 2.0, freq: 0.9999999902083243} * dy/dx0{power: 1.0} + 0.0 * ctrl{power: 1.0} * cos(phi){power: 1.0, freq: 1.0000000035882999} + 2.2387960029179865e-06 * d^2phi/dx0^2{power: 1.0} + 0.0 * ctrl{power: 1.0} * sign(dy/dx1){power: 1.0} + 0.0 * phi{power: 1.0} * sign(dy/dx1){power: 1.0} + 0.0 * cos(phi){power: 1.0, freq: 0.9999999950162397} * d^2y/dx0^2{power: 1.0} + 0.0006544813147694867 = cos(phi){power: 1.0, freq: 0.9999999986053721} * dy/dx0{power: 1.0}
 \ 0.0 * cos(phi){power: 2.0, freq: 1.0000000001202665} * d^2y/dx0^2{power: 1.0} + 0.0 * cos(phi){power: 1.0, freq: 1.000000006281133} * d^2y/dx0^2{power: 1.0} + 0.0 * sign(dy/dx1){power: 1.0} * cos(phi){power: 2.0, freq: 1.0000000064028476} + 0.0 * d^2phi/dx0^2{power: 1.0} * phi{power: 1.0} * d^2y/dx0^2{power: 1.0} + 0.0 * phi{power: 1.0} * d^2phi/dx0^2{power: 1.0} + 0.0 * cos(phi){power: 2.0, freq: 1.0000000026871192} * d^2phi/dx0^2{power: 1.0} + -8.986182951288338 * dphi/dx0{power: 1.0} * cos(phi){power: 1.0, freq: 0.99999999656928} + 0.8545137935976129 * dy/dx0{power: 1.0} * dphi/dx0{power: 1.0} + 0.0 * ctrl{power: 1.0} * dphi/dx0{power: 1.0} + -0.19127089513338214 = dphi/dx0{power: 1.0} * phi{power: 2.0}
{'terms_number': {'optimizable': False, 'value': 10}, 'max_factors_in_term': {'optimizable': False, 'value': {'factors_num': [1, 2, 3], 'probas': [0.2, 0.65, 0.15]}}, ('sparsity', 'phi'): {'optimizable': True, 'value': np.float64(0.0060871186850731795)}, ('sparsity', 'y'): {'optimizable': True, 'value': np.float64(0.0022565728692783994)}} , with objective function values of [8.84598998e-03 3.34703176e+00 1.10000000e+01 6.50000000e+00] 
